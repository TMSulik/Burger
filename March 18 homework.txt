# Node Express Handlebars

### Overview
Create a burger logger with MySQL, Node, Express, Handlebars and a homemade ORM. 
Be sure to follow the MVC design pattern.
User -> Controller -> Model -> View -> User
[Model is basically the database structure]
[User uses the controller to manipulate the model the updates the view that the user then sees.]
Use Node and MySQL to query and route data in your app.
Use Handlebars to generate your HTML.

### Read This
If you are trying to connect remotely to your Heroku database on an open network such as a coffee shop, library, or even your University WiFi, it will be blocked. 

### Important
**This assignment must be deployed on Heroku.** 
Be sure to utilize the MYSQL Heroku Deployment Guide in order to deploy your assignment.
https://github.com/avissony/sequelizedBurger/blob/master/14-node-express-handlebars/1-Class-Content/14.3/Supplemental/MySQLHerokuDeploymentProcess.pdf

### Before You Begin
* Eat-Da-Burger! is a restaurant app that lets users input the names of burgers they'd like to eat.
* Whenever a user submits a burger's name, your app will display the burger on the left side of the page, waiting to be devoured.
* Each burger in the waiting area also has a `Devour it!` button. When the user clicks it, the burger will move to the right side of the page.
* Your app will store every burger in a database, whether devoured or not.
* [Check out this video of the app for a run-through of how it works](https://youtu.be/msvdn95x9OM).

### Submission on BCS
* **This assignment must be deployed.** * 
Submit both the deployed Heroku link to your homework AND the link to the Github Repository.

## Instructions

#### App Setup [DONE]
1. Create a GitHub repo called `burger` and clone it to your computer.
2. Make a package.json file by running `npm init` from the command line.
3. Install the Express npm package: `npm install express`.
4. Create a server.js file.
5. Install the Handlebars npm package: `npm install express-handlebars`.
6. Install MySQL npm package: `npm install mysql`.
7. Require the following npm packages inside of the server.js file:
   * express

#### DB Setup [DONE]
1. Inside your `burger` directory, create a folder named `db`.
2. In the `db` folder, create a file named `schema.sql`. Write SQL queries this file that do the following:
   * Create the `burgers_db`.
   * Switch to or use the `burgers_db`.
   * Create a `burgers` table with these fields:
     * **id**: an auto incrementing int that serves as the primary key.
     * **burger_name**: a string.
     * **devoured**: a boolean.
3. Still in the `db` folder, create a `seeds.sql` file. In this file, write insert queries to populate the `burgers` table with at least three entries.
4. Run the `schema.sql` and `seeds.sql` files into the mysql server from the command line
>  mysql -u root -p < schema.sql
>  mysql -u root -p < seeds.sql
5. Now you're going to run these SQL files.
   * Make sure you're in the `db` folder of your app.
   * Start MySQL command line tool and login: `mysql -u root -p`.
   * With the `mysql>` command line tool running, enter the command `source schema.sql`. This will run your schema file and all of the queries in it -- in other words, you'll be creating your database.
   * Now insert the entries you defined in `seeds.sql` by running the file: `source seeds.sql`.
   * Close out of the MySQL command line tool: `exit`.

#### Config Setup
1. Inside your `burger` directory, create a folder named `config`.
2. Create a `connection.js` file inside `config` directory.
   * Inside the `connection.js` file, setup the code to connect Node to MySQL.
   * Export the connection.
3. Create an `orm.js` file inside `config` directory.
   * Import (require) `connection.js` into `orm.js`
   * In the `orm.js` file, create the methods that will execute the necessary MySQL commands in the controllers. These are the methods you will need to use in order to retrieve and store data in your database.

[DONE TO HERE]

??? HOW DO YOU CREATE THESE METHODS IN ORM ???
   * `selectAll()`
   * `insertOne()`
   * `updateOne()`
   * Export the ORM object in `module.exports`.

#### Model setup [DONE]
* Inside your `burger` directory, create a folder named `models`.
* In `models`, make a `burger.js` file.
* Inside `burger.js`, import `orm.js` into `burger.js`
[DONE TO HERE]

??? HOW DO YOU CALL THESE METHODS FROM ORM ???
* Also inside `burger.js`, create the code that will call the ORM functions using burger specific input for the ORM.

[DONE]
* Export at the end of the `burger.js` file.

#### Controller setup [DONE]
1. Inside your `burger` directory, create a folder named `controllers`.
2. In `controllers`, create the `burgers_controller.js` file.
3. Inside the `burgers_controller.js` file, import the following:
   * Express
   * `burger.js`
4. Create the `router` for the app, and export the `router` at the end of your file.

#### View setup [DONE]
1. Inside your `burger` directory, create a folder named `views`.
   * Create the `index.handlebars` file inside `views` directory.
   * Create the `layouts` directory inside `views` directory.
   * Create the `main.handlebars` file inside `layouts` directory.
   * Setup the `main.handlebars` file so it's able to be used by Handlebars.

??? HOW DO YOU SET UP A HANDLEBARS INDEX FILE ???   
* Setup the `index.handlebars` to have the template that Handlebars can render onto.
* Create a button in `index.handlebars` that will submit the user input into the database.

#### Directory structure  [DONE]
All the recommended files and directories from the steps above should look like the following structure:

```
├── config
│   ├── connection.js
│   └── orm.js
│ 
├── controllers
│   └── burgers_controller.js
│
├── db
│   ├── schema.sql
│   └── seeds.sql
│
├── models
│   └── burger.js
│ 
├── node_modules
│ 
├── package.json
│
├── public
│   └── assets
│       ├── css
│       │   └── burger_style.css
│       └── img
│           └── burger.png
│   
│
├── server.js
│
└── views
    ├── index.handlebars
    └── layouts
        └── main.handlebars
```

### Reminder: Submission on BCS

* Please submit both the deployed Heroku link to your homework AND the link to the Github Repository!

- - -

### Minimum Requirements

Attempt to complete homework assignment as described in instructions. If unable to complete certain portions, please pseudocode these portions to describe what remains to be completed. Hosting on Heroku and adding a README.md are required for this homework. In addition, add this homework to your portfolio, more information can be found below.
 
- - -

### Hosting on Heroku [NOT EVEN STARTED]

Now that we have a backend to our applications, we use Heroku for hosting. Please note that while **Heroku is free**, it will request credit card information if you have more than 5 applications at a time or are adding a database.

Please see [Heroku’s Account Verification Information](https://devcenter.heroku.com/articles/account-verification) for more details.

- - -

### Create a README.md

Add a `README.md` to your repository describing the project. Here are some resources for creating your `README.md`. Here are some resources to help you along the way:

* [About READMEs](https://help.github.com/articles/about-readmes/)

* [Mastering Markdown](https://guides.github.com/features/mastering-markdown/)

- - -

### Add To Your Portfolio

After completing the homework please add the piece to your portfolio. Make sure to add a link to your updated portfolio in the comments section of your homework so the TAs can easily ensure you completed this step when they are grading the assignment. To receive an 'A' on any assignment, you must link to it from your portfolio.

- - -

### One More Thing

This is a really tough homework assignment, but we want you to put in your best effort to finish it.

If you have any questions about this project or the material we have covered, please post them in the community channels in slack so that your fellow developers can help you! If you're still having trouble, you can come to office hours for assistance from your instructor and TAs.

### Reminder

When trying to connect remotely to your Heroku database on an open network such as a coffee shop, library, or even your University WiFi, it will be blocked. If you are experiencing a Heroku connection error, this could be why.

**Good Luck!**

**Instructions**

  * Create a full-stack application with Express, MySQL and Handlebars.

    * HINT: this web application will be very similar to the app your instructor just demonstrated and slacked out. Please feel free to leverage that code when creating this code.

  * Create a `schema.sql` file. Inside of that file, do the following:

1. Make a database called moviePlannerDB
2. Inside of that database make a movies table which will contain a movie column and an id column. The id will be automatically incremented while also being the primary key.
3. Run your `schema.sql` file within MySQL Workbench before moving onto the next steps.
  * In your server.js file, you will create four routes: `get`, `post`, `put`, and `delete`.
  * Render the main `index.handlebars` when the `'/'` get route is hit with all of the movies from the movies table.
  * Your application should have a set of routes on `'/movies'` for create, update, and delete operations on the movies table.
   * Show a delete button next to each movie. When one of the delete buttons is clicked, the code should send a DELETE request to  delete the associated movie from your database.
  * Additionally, show the form that the user can use to add a movie to be watched.  When the submit button is clicked, the code will post to the `'/movies'` route, which will insert the movie from the form into the movies table and return the ID of the new movie.
  * Have another form that will update a movie in the movies table. The form will include two inputs: an id input and a movie title input. Remember to leverage a PUT method.

Remember: best practices for REST include:
  * Put your REST API on it's own URL (e.g. `'/todos'`).
  * A POST that creates an item should return the ID of the item it created.
  * PUT and DELETE should specify the ID of the item they're intended to affect in the URL (e.g. `'/todos/123'`).
  * If the ID for the item specified in a PUT or DELETE couldn't be found, return a 404.
  * If an error occurs in the server, return an error code (e.g. 500).


FAST FOOD COLOR PALETTE
Old Brick #982121	
Orange #ff611d	
Alizarin Crimson #e32929
Selective Yellow #ffb80e
Sanguine Brown #813531
Sidecar #F6F1C7

mysql -u root -p < schema.sql

mysql -u root -p
source schema.sql 
source seeds.sql 
exit

The assignment was to create a web app following the MVC design pattern: a user inputs new data via a controller, which updates the model (the database structure), which in turn updates the view that the user sees on the screen. I used Node and MySQL query and route the data, and Handlebars to generate the HTML.

The page has a form to order a custom burger of the user’s design. The new burgers are stored in the database. They appear in a column on the left. When users click on the burger, they consume it, and it moves over to a column on the right. 

https://git.heroku.com/floating-taiga-42446.git

You may need to redefine `connection` for heroku in connection.js.

JawsDB is MySQL on the Heroku side













